{"version":3,"sources":["Container/map/marker.js","Container/map/map.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Marker","props","color","name","id","className","style","backgroundColor","cursor","title","Map","state","lat","lng","MapShow","withGoogleMap","defaultCenter","defaultZoom","containerElement","mapElement","height","Component","Postal","isLoading","users","error","isFilter","items","filterlat","filterlng","input","array","filterTableData","bind","this","fetchUsers","console","log","fetch","then","response","json","data","setState","catch","map","user","col-span","postal_code","Longitude","Latitude","e","persist","value","target","filtervalue","filtercontacts","filter","item","indexOf","Fragment","type","placeholder","onChange","minlength","maxlength","class","cellspacing","index","key","renderTableData","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de221f67.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Marker = (props) => {\r\n    const { color, name, id } = props;\r\n    return (\r\n        <div>\r\n      <div className=\"pin bounce\"\r\n        style={{ backgroundColor: color, cursor: 'pointer'}}\r\n        title={name}\r\n      />\r\n      <div className=\"pulse\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Marker;","import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap } from 'react-google-maps';\r\nimport Marker from '../map/marker';\r\nclass Map extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      lat:this.props.lat,\r\n      lng:this.props.lng\r\n    }\r\n  }\r\n    render() {\r\n    const MapShow = withGoogleMap(props => (\r\n       <GoogleMap\r\n         defaultCenter = { { lat: this.state.lat, lng: this.state.lng } }\r\n         defaultZoom = { 13 }\r\n       >\r\n         {/* used for Google map marker */}\r\n          <Marker\r\n            lat={this.state.lat}\r\n            lng={this.state.lng}\r\n            name=\"Location\"\r\n            color=\"Red\"\r\n          />\r\n       </GoogleMap>\r\n    ));\r\n    return(\r\n       <div>\r\n         <MapShow\r\n           containerElement={ <div className=\"mapContainer\"/> }\r\n           mapElement={ <div style={{ height: `100%` }} /> }\r\n         />\r\n       </div>\r\n    );\r\n    }\r\n };\r\nexport default Map;\r\n","import Map from './map/map'\r\nimport React, { Component } from 'react';\r\n\r\nclass Postal extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    //Initialising State-->\r\n    this.state = {\r\n      isLoading: true,\r\n      users: [],        \r\n      error: null,\r\n      isFilter: false,\r\n      items: [],\r\n      filterlat: 28.7041, //set initially latitude of delhi \r\n      filterlng: 77.1025,  //set initially longitude of delhi\r\n      input: \"\",\r\n      array:[]\r\n    };\r\n    this.filterTableData = this.filterTableData.bind(this);\r\n  }\r\n\r\n\r\n  //Lifecycle method foe API call-->\r\n  componentDidMount() {\r\n    this.fetchUsers();\r\n    console.log(\"vaue\", this.state.users);\r\n  }\r\n\r\n  //Method to call API for postal Address->\r\n  fetchUsers() {\r\n    fetch(`https://my.api.mockaroo.com/postal-data.json?key=c9092d70`)\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          users: data,\r\n          isLoading: false,\r\n        })\r\n      )\r\n      .catch(error => this.setState({ error: true, isLoading: false }));\r\n  }\r\n  //Table row rendering function-->\r\n  renderTableData() {\r\n    console.log(\"stateuser\", this.state.users)\r\n    return this.state.users.map(user => {\r\n      // const { postal_code, Longitude, state } = user;\r\n      return (\r\n        <tr col-span=\"2\">\r\n          <td>{user.postal_code}</td>\r\n          <td>{user.Longitude}</td>\r\n          <td>{user.Latitude}</td>\r\n          <td>{user.state}</td>\r\n        </tr>\r\n\r\n      );\r\n    })\r\n  }\r\n\r\n  filterTableData(e) {\r\n    e.persist();\r\n    const value = e.target.value;\r\n    //set the state \r\n    this.setState({\r\n      isFilter: true,\r\n      input: value\r\n    });\r\n\r\n  }\r\n\r\n  updateTable(){\r\n    \r\n  }\r\n\r\n  render() {\r\n    //Deconstructing ->\r\n    const { isLoading, isFilter, error, filterlat, filterlng, input } = this.state;\r\n    let filtervalue = this.state.input;\r\n    //Filter data\r\n    let filtercontacts = this.state.users.filter((item) => {\r\n      return item.postal_code.indexOf(filtervalue) !== -1;\r\n    });\r\n      \r\n    // setTimeout(()=>{\r\n      // this.setState({\r\n      //   filterlat:filtercontacts.Latitude,\r\n      //   filterlng:filtercontacts.Longitude\r\n      // },()=>{\r\n        \r\n      // })\r\n    // },10000)\r\n    \r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <h1>Postal ADDRESS MAPPING</h1>\r\n\r\n        {/* Input search for Postal address*/}\r\n        <input className=\"search-field\" type=\"text\" placeholder=\"Search For Postal Code\" value={input} onChange={this.filterTableData.bind(this)} minlength=\"2\" maxlength=\"5\" />\r\n\r\n        {/* Error handling  */}\r\n        {error ? <p>{error}</p> : null}\r\n\r\n        {/* Rendering the DATA in table if got reponse from API  */}\r\n        <div className=\"container\">\r\n          <div class=\"row\">\r\n            <div className=\"Table-item\">\r\n              {!isLoading ? (\r\n                <table cellspacing=\"0\">\r\n                  <thead>\r\n                    <th>\r\n                      Postal_code\r\n                  </th>\r\n                    <th>\r\n                      Longitude\r\n                  </th>\r\n                    <th>\r\n                      Latitude\r\n                  </th>\r\n                    <th>\r\n                      State\r\n                  </th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {/* For rendering table  */}\r\n                    {!isFilter ? this.renderTableData() : filtercontacts.map((users,index) => {\r\n                      return (\r\n                        <tr col-span=\"2\" key={index}>\r\n                          <td>{users.postal_code}</td>\r\n                          <td >{users.Longitude}</td>\r\n                          <td>{users.Latitude}</td>\r\n                          <td>{users.state}</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              ) : (\r\n                  <h3>Loading...</h3>\r\n                )}\r\n            </div>\r\n\r\n            {/* Google MAP Rendering section */}\r\n            <div className=\"Map-item\">\r\n              <Map lat={filterlat} lng={filterlng} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Postal;","import React from 'react';\nimport './App.scss';\nimport Postal from './Container/index';\n\nclass  App extends React.Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <Postal/>\n    </div>\n  );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}